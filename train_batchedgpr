#!/usr/bin/python3

import argparse
import sys

from batchedGRP import BatchedGaussianProcessRegressor
from graphshift_lib import make_df, make_maskshifts, rmse
import numpy as np

parser = argparse.ArgumentParser(description=''.join(('Train batched GPR with ',
	'small molecule chemical shifts and structures')))
parser.add_argument('--data', '-d', required=True, type=str,
	metavar='<str>', help='xz zipped json database')
parser.add_argument('--atom', '-a', required=False, default='C',
	metavar='<str>', help='atom type to predict on, default is carbon')
parser.add_argument('--train', '-n', required=True,
	metavar='<int>', help='training set size')
parser.add_argument('--batch', '-b', required=True,
	metavar='<int>', help='batch size')
parser.add_argument('--tol', '-t', required=False, default=1e-3,
	metavar='<float>', help='tolerance for optimization')
parser.add_argument('--val', '-v', required=False, default=1000,
	metavar='<int>', help='validation size')
parser.add_argument('--out', '-o', required=True,
	metavar='<str>', help='directory for saved models')
parser.add_argument('--name', '-f', required=False, default='model.pickle',
	metavar='<str>', help='Name for pickle output file')
parser.add_argument('--load', '-l', required=False,
	metavar='<str>', help='Name of model pickle file to load')

arg        = parser.parse_args()
n          = int(arg.train)
tol        = float(arg.tol)
nv         = int(arg.val)
chunk_size = int(arg.batch)
atom       = str(arg.atom)
out_path   = str(arg.out)
out_name   = str(arg.name)

if arg.load:
	pass

df = make_df(arg.data)

X  = df.graphs[:n]
Y  = make_maskshifts(df.shifts[:n].to_list(), df.symbols[:n].to_list(), atom)
Xv = df.graphs[n:n+nv]
Yv = make_maskshifts(df.shifts[n:n+nv].to_list(), df.symbols[n:n+nv].to_list(), atom)

train_nodes = [len(g.nodes['!i']) for g in X]
train_nodes = np.sum(np.array(train_nodes))
test_nodes  = [len(g.nodes['!i']) for g in Xv]
test_nodes  = np.sum(np.array(test_nodes))

print(f"""
train graphs: {n}
validation graphs: {nv}
train shifts: {Y.compressed().shape[0]}
train nodes: {train_nodes}
validation shifts: {Yv.compressed().shape[0]}
validation nodes: {test_nodes}
""")

bgpr = BatchedGaussianProcessRegressor(chunk_size=chunk_size)
bgpr.fit(X,Y,tol=tol)

if bgpr.success:
	train_preds = bgpr.predict(X, Y, alpha=bgpr.alpha)
	test_preds  = bgpr.predict(Xv, Yv)
	
	inRMSE  = rmse(train_preds, Y.compressed())
	outRMSE = rmse(test_preds, Yv.compressed())
	
	print(f'Train RMSE: {inRMSE:1.4E}')
	print(f'Test RMSE : {outRMSE:1.4E}')
	
	bgpr.save(out_path, filename=out_name, overwrite=True)
else:
	print('fit not successful')
